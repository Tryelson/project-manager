import React, { ReactElement, useEffect } from "react";
import { Flex, Box, IconButton, Button, useColorMode, FormControl, FormLabel, Heading, Input, Image, Link, InputGroup, InputLeftElement, InputRightElement, useBoolean , Fade, useToast} from "@chakra-ui/react";
import { SunIcon, MoonIcon, EmailIcon, LockIcon, ViewIcon, ViewOffIcon } from "@chakra-ui/icons";
import { useState } from "react";
import Head from "next/head";
import { useSetUserMutation } from "../../api/user";
import { useRouter } from "next/router";
import LoginLayout from "../../components/LoginLayout";

export default function Login() {
    return (
        <Box>
            <Head>
                <title>Hive Project - Login</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <Flex justifyContent={'center'} alignItems={'center'} minHeight='100vh'>
                <ThemeSelector />
                <LoginArea />
            </Flex>
        </Box>
    )
}

const LoginArea = () => {
    const { colorMode } = useColorMode()
    const toast = useToast()
    const route = useRouter()

    const [showPassword, setShowPassword] = useBoolean()

    const [email, setEmail] = useState<string>('')
    const [password, setPassword] = useState<string>('')

    const [setUser, { isLoading, isError, isSuccess }] = useSetUserMutation()

    const handleFormSubmit = async (event: React.MouseEvent<HTMLButtonElement>) => {
        event.preventDefault()
        const payload = {email, password}
        await setUser(payload)
    }

    useEffect(() => {
        if(isSuccess){
            toast({
                title: 'Login efetuado com sucesso',
                status: 'success',
                duration: 3000,
                isClosable: true,
                position: 'top'
            })
            route.push('/project')
        } 
        
        if(isError){
            toast({
                title: 'Erro ao fazer login',
                description: "Verifique suas credenciais.",
                status: 'error',
                duration: 9000,
                isClosable: true,
                position: 'top'
            })
        }

    }, [isLoading])

    return (
        <Box as="main" maxW={'37.5rem'} w='calc(100% - 2.5rem)' mx={'auto'} boxShadow={'0 0 1.25rem #00000042'} border={'2px'} borderColor="#CC953D" padding={'2.1875rem'} pb={'3.125rem'} borderRadius='1.25rem'>
            <Box>
                <Heading>
                    <Flex justifyContent={'center'} flexDirection={['column', 'row']} alignItems={'center'} gap={'1.25rem'}>
                        Bem-vindos a <Image width={'7.5rem'} src={colorMode === 'light' ? '/assets/hivepro_black.png' : '/assets/hivepro_light.png'} />
                    </Flex>
                </Heading>
            </Box>

            <Box as="form">
                <FormControl mt={'3.75rem'} isInvalid={isError}>
                    <Box>
                        <FormLabel htmlFor="email">E-mail</FormLabel>

                        <InputGroup>
                            <InputLeftElement pointerEvents={'none'} children={<EmailIcon />} />
                            <Input _placeholder={{color: 'gray'}} borderColor={'gray'} type={'email'} id={'email'} onChange={event => setEmail(event.target.value)} placeholder="Digite seu endereÃ§o de E-mail" />
                        </InputGroup>
                    </Box>
                    <Box mt={'1.25rem'}>
                        <FormLabel htmlFor="password">Senha</FormLabel>

                        <InputGroup>
                            <InputLeftElement pointerEvents={'none'} children={<LockIcon />} />

                            <Input borderColor={'gray'} _placeholder={{color: 'gray'}} type={`${showPassword ? 'text' : 'password'}`} onChange={event => setPassword(event.target.value)} id={'password'} placeholder="Digite a sua senha" />

                            <Fade in={showPassword}>
                                <InputRightElement onClick={setShowPassword.toggle} cursor={'pointer'} children={<ViewOffIcon />} />
                            </Fade>

                            <Fade in={!showPassword}>
                                <InputRightElement onClick={setShowPassword.toggle} cursor={'pointer'} children={<ViewIcon />} />
                            </Fade>
                            
                        </InputGroup>
                    </Box>
                </FormControl>

                <Box  mt={'1.25rem'} mb={'2.5rem'}>
                    <Link href="/login/recovery-password">Esqueceu a senha?</Link>
                </Box>

                <Button type={'submit'} onClick={handleFormSubmit} boxShadow={'0 0 0.1875rem black'} isLoading={isLoading} loadingText={'Entrando...'} spinnerPlacement={'end'} colorScheme='orange' bg={'#CC953D'} w={'100%'}>Entrar</Button>

            </Box>
        </Box>
    )
}

export const ThemeSelector = () => {
    const { colorMode, toggleColorMode} = useColorMode()

    return (
        <Box mb={'auto'} position={"absolute"} top={'0.625rem'} left={'0.625rem'}>
            <IconButton aria-label="Toggle Dark Mode" boxShadow={'0 0 0.3125rem #000000'} icon={colorMode === 'dark' ? <SunIcon /> : <MoonIcon />} onClick={toggleColorMode} />
        </Box>
    )
}

Login.getLayout = function(page: ReactElement) {
    return <LoginLayout>{page}</LoginLayout>
}